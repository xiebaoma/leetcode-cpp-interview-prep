/**
 在隋炀帝执政的隋朝盛世时期，隋朝的政治相对稳定，经济迅速发展，丝绸之路的贸易也十分繁荣。这一时期，长安城作为国际都市，吸引了众多国内外商人前来交易，也成为了各色人等进行金钱游戏的热土。在这样的背景下，有一位不愿意透露姓名的商人，我们姑且称他为“隐居商人”。某日，他在都城长安偶然间与一位来自西域的商队领队进行了一场赌博，竟意外赢得了一大笔钱。

这位隐居商人了解到，隋炀帝为了实现“天下一统”，大兴土木，连续举办了几次大规模的盛会，例如在大运河完工之后的盛大庆典，这导致国库日渐空虚。为了筹措资金，朝廷发行了类似于现代债券的国债，承诺投资者以固定的利率回报。市场上共有d种这样的国债，每种都承诺在投资后能获得稳定的年收益。

例如，市场上流通着两种主要的国债：

投资额4000贯，年收益为400贯；
投资额3000贯，年收益为250贯。
初始时，这位隐居商人有10000贯的总资产。他精明地分析了市场和国债的利息，决定进行投资。他可以选择投资两份4000贯的国债，一年就可以获得800贯的利息；或者他也可以选择投资一份4000贯和两份3000贯的国债，这样一年可以获得900贯的利息。两年后，他可以获得1800贯的总利息，总资产达到11800贯。随后，他选择卖掉一份3000贯的国债，改为购买4000贯的国债，这样年利息可提升至1050贯；第三年结束后，他的总资产达到12850贯，有能力购买三份4000贯的国债，年利息因此增至1200贯，第四年结束时，他的总资产增至14050贯。

现在，隐居商人面临一个复杂的问题，假设市场上有d种国债和他拥有的初始资产总额s，他需要计算出，在经过n年的投资后，他能拥有的资产总额的最大值。在这个充满变数的时代，这确实是一个考验他智慧和远见的挑战。


输入描述
第一行三个整数s,n,d，含义如上

接下来d行，每行表示一种债券，每行两个整数，第一个表示投资额，第二个表示年利息

 

s -> [1,10^6]

n -> [2,40]

d -> [1,10]

a -> [1,10^4]  且a是1000的倍数

b不超过a的10%


输出描述
一个整数，表示n年后的最大资产总额


 */


/**
 * 完全背包 + 多阶段投资问题
 */


/*
10000 4 2
4000 400
3000 250
*/

#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    long long s; // 初始资金
    int n, d;    // 年数, 债券种类
    cin >> s >> n >> d;

    vector<int> a(d), b(d);
    for (int i = 0; i < d; ++i)
        cin >> a[i] >> b[i];

    for (int year = 0; year < n; ++year) {
        vector<long long> f(s + 1, 0); // f[j] 表示资金为 j 时最大利息

        for (int i = 0; i < d; ++i) {
            for (long long j = a[i]; j <= s; ++j) {
                f[j] = max(f[j], f[j - a[i]] + b[i]);
            }
        }

        s += f[s]; // 一年后总资产 = 本金 + 最大利息
    }

    cout << s << "\n";
    return 0;
}
